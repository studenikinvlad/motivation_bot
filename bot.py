import logging
import re
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup

from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler, filters,
                          ConversationHandler, CallbackContext)
import db
from config import BOT_TOKEN, ADMINS, ADMIN_INFO, USM_SCORES, CONSULTANT_SCORES

# –°—Ç–µ–π—Ç—ã ConversationHandler
(MAIN_MENU, CHOOSE_ACTION, ENTER_DESCRIPTION, SELECT_USER,
 SELECT_REASON, CONFIRM_POINTS, SELECT_EMPLOYEE_FOR_HISTORY, SELECT_ACTION,
 ENTER_CUSTOM_POINTS, ENTER_DEDUCT_POINTS, REGISTRATION_FIO, REGISTRATION_ROLE, EDIT_TEXT_INPUT ) = range(13)


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def ensure_registered(update: Update) -> bool:
    user_id = update.effective_user.id
    if user_id in ADMINS:
        return True
    if not db.get_user(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return False
    return True

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    
    if user_id in ADMINS:
        # –ê–¥–º–∏–Ω—ã —Å—Ä–∞–∑—É –≤ –º–µ–Ω—é, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
        await show_main_menu(update)
        return MAIN_MENU

    user = db.get_user(user_id)
    if user is None:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ—Ö–æ–∂–µ, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
        return REGISTRATION_FIO
    else:
        await show_main_menu(update)
        return MAIN_MENU


# –û–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def show_main_menu(update: Update):
    user_id = update.effective_user.id
    if user_id in ADMINS:
        buttons = [
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤")],
            [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è")],
        ]
    else:
        buttons = [
            [KeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")],
            [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    elif update.callback_query:
        await update.callback_query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)


#–ë–∞–∑–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∞–≤–∏–ª–∞ –∏ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç
def load_price():
    try:
        with open("price.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        return "‚ö†Ô∏è –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω."


def load_rules():
    try:
        with open("rules.txt", "r", encoding="utf-8") as f:
            return f.read().strip()
    except FileNotFoundError:
        return "‚ö†Ô∏è –ü—Ä–∞–≤–∏–ª–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."


async def send_price(update: Update, context: CallbackContext):
    await update.message.reply_text(load_price())

async def send_rules(update: Update, context: CallbackContext):
    await update.message.reply_text(load_rules())


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –§–ò–û
async def registration_fio(update: Update, context: CallbackContext):
    fio = update.message.text.strip()
    if not fio:
        await update.message.reply_text("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTRATION_FIO
    context.user_data['fio'] = fio
    buttons = [[KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")], [KeyboardButton("–£–°–ú")]]
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=markup)
    return REGISTRATION_ROLE

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–ª–∏
async def registration_role(update: Update, context: CallbackContext):
    role = update.message.text.strip()
    if role not in ["–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–£–°–ú"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return REGISTRATION_ROLE
    fio = context.user_data['fio']
    user_id = update.effective_user.id
    db.add_user(user_id, fio, role)
    await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {fio} ({role}) üéâ")
    await show_main_menu(update)
    return MAIN_MENU

# –ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∞
async def show_admin_changes_menu(update: Update, context: CallbackContext):
    buttons = [
        [KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")],
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π:", reply_markup=markup)

async def edit_rules(update: Update, context: CallbackContext):
    context.user_data['edit_mode'] = 'rules'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª:")
    return EDIT_TEXT_INPUT


async def edit_price(update: Update, context: CallbackContext):
    context.user_data['edit_mode'] = 'price'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:")
    return EDIT_TEXT_INPUT


async def edit_text_input(update: Update, context: CallbackContext):
    mode = context.user_data.get('edit_mode')
    new_text = update.message.text.strip()

    try:
        if mode == 'rules':
            with open("rules.txt", "w", encoding="utf-8") as f:
                f.write(new_text)
            await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        elif mode == 'price':
            with open("price.txt", "w", encoding="utf-8") as f:
                f.write(new_text)
            await update.message.reply_text("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")

    context.user_data['edit_mode'] = None
    await show_main_menu(update)
    return MAIN_MENU


#–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def show_employees_for_admin(update, context):
    users = db.get_all_users()  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç [(user_id, fio, role), ...]

    keyboard = []
    for user_id, fio, role in users:
        text = f"{fio} ({role})"
        callback_data = f"delete_user_{user_id}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data="noop"),  # –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –±–µ–∑ –¥–µ–π—Å—Ç–≤–∏—è
                         InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=callback_data)])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", reply_markup=reply_markup)

async def handle_delete_user(update, context):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    if user_id not in ADMINS:
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return
    
    data = query.data  # –ø—Ä–∏–º–µ—Ä: "delete_user_123456"
    user_id = int(data.split("_")[-1])

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
    db.delete_user(user_id)

    await query.edit_message_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} —É–¥–∞–ª—ë–Ω.")
    await show_employees_for_admin(update, context)


    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    # await show_employees_for_admin(update, context)

#–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∏ –∏—Ö –±–∞–ª–ª–æ–≤

async def choose_role(update: Update, context: CallbackContext):
    keyboard = [
        [
            InlineKeyboardButton("–£–°–ú", callback_data="role_–£–°–ú"),
            InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="role_–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=reply_markup)


async def show_employees_by_role(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()

    role = query.data.split("_")[1]  # –ü–æ–ª—É—á–∞–µ–º '–£–°–ú' –∏–ª–∏ '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç'

    users = db.get_all_users()
    filtered = [u for u in users if u[2] == role]  # u[2] ‚Äî —Ä–æ–ª—å

    if not filtered:
        await query.edit_message_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é {role} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    msg = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é {role}:\n\n"
    for user_id, fio, _ in filtered:
        user_data = db.get_user(user_id)
        points = user_data[3] if user_data else 0
        msg += f"{fio} ‚Äî –ë–∞–ª–ª—ã: {points}\n"

    await query.edit_message_text(msg)



#—Ö–µ–Ω–¥–ª–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
async def notify_user_points_change(context: CallbackContext, user_id: int, points: int, reason: str):
    user = db.get_user(user_id)
    if not user:
        return
    fio = user[1]
    current_points = user[3]
    sign = '+' if points > 0 else ''
    text = f"{fio}, –≤–∞–º {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '—Å–ø–∏—Å–∞–Ω–æ'} {sign}{points} –±–∞–ª–ª–æ–≤ –∑–∞: {reason}.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_points} –±–∞–ª–ª–æ–≤."
    try:
        await context.bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# --- –ù–æ–≤—ã–π —Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" ---
async def begin_employee_history(update: Update, context: CallbackContext):
    users = db.get_all_users()
    buttons = [[KeyboardButton(f"{u[1]} ({u[0]})")] for u in users]  # [ ["–ò–≤–∞–Ω–æ–≤ (123)"], ... ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=markup)
    return SELECT_EMPLOYEE_FOR_HISTORY

async def show_employee_history(update: Update, context: CallbackContext):
    selected = update.message.text
    try:
        fio, uid = selected.rsplit('(', 1)
        user_id = int(uid[:-1])
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_EMPLOYEE_FOR_HISTORY

    history = db.get_points_history(user_id)
    user = db.get_user(user_id)
    if not user:
        await update.message.reply_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return SELECT_EMPLOYEE_FOR_HISTORY

    _, fio_full, _, points = user

    if not history:
        text = f"–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {fio_full} –ø—É—Å—Ç–∞.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤."
    else:
        text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {fio_full} (—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤):\n\n"
        # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        for admin_id, pts, reason, ts in history[:10]:
            admin_name = ADMIN_INFO.get(admin_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",))[0]
            sign = "+" if pts > 0 else ""
            text += f"{ts}: {sign}{pts} –∑–∞ {reason} (–æ—Ç {admin_name})\n"

    await update.message.reply_text(text)
    await show_main_menu(update)
    return MAIN_MENU

# –ü—Ä–æ—Å–º–æ—Ç—Ä –±–∞–ª–∞–Ω—Å–∞
async def handle_balance(update: Update, context: CallbackContext):
    user = db.get_user(update.effective_user.id)
    if user:
        _, fio, _, points = user
        await update.message.reply_text(f"{fio}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏
async def handle_history(update: Update, context: CallbackContext):
    history = db.get_points_history(update.effective_user.id)
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
    for admin_id, points, reason, ts in history:
        admin_name = ADMIN_INFO.get(admin_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",))[0]
        text += f"{ts}: {'+' if points > 0 else ''}{points} –∑–∞ {reason} (–æ—Ç {admin_name})\n"
    await update.message.reply_text(text)

# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ/–°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤
async def begin_point_change(update: Update, context: CallbackContext):
    buttons = [
        [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã")],
        [KeyboardButton("–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return SELECT_ACTION


async def select_action(update: Update, context: CallbackContext):
    action = update.message.text
    if action not in ["–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT_ACTION

    context.user_data['action'] = action
    users = db.get_all_users()
    buttons = [[KeyboardButton(f"{u[1]} ({u[0]})")] for u in users]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup)
    return SELECT_USER


async def select_user(update: Update, context: CallbackContext):
    selected = update.message.text
    try:
        name, uid = selected.rsplit('(', 1)
        user_id = int(uid[:-1])
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_USER

    context.user_data['selected_user_id'] = user_id
    action = context.user_data['action']

    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50; –û—à–∏–±–∫–∞ –≤ —É—á—ë—Ç–µ"
        )
        return ENTER_DEDUCT_POINTS
    else:
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è ‚Äî –∫–∞–∫ –±—ã–ª–æ
        role = db.get_user(user_id)[2]
        score_table = USM_SCORES if "–£–°–ú" in role else CONSULTANT_SCORES
        context.user_data['score_table'] = score_table

        buttons = [[KeyboardButton(reason)] for reason in score_table.keys()]
        buttons.append([KeyboardButton("–î—Ä—É–≥–æ–µ")])
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=markup)
        return SELECT_REASON

async def enter_deduct_points(update: Update, context: CallbackContext):
    text = update.message.text
    try:
        points_str, reason = text.split(';', 1)
        points = int(points_str.strip())
        reason = reason.strip()
        if points <= 0 or not reason:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "50; –û—à–∏–±–∫–∞ –≤ —É—á—ë—Ç–µ"
        )
        return ENTER_DEDUCT_POINTS

    points = -abs(points)  # –°–ø–∏—Å–∞–Ω–∏–µ ‚Äî –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    admin_id = update.effective_user.id
    user_id = context.user_data['selected_user_id']

    db.add_points(admin_id, user_id, points, reason)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {abs(points)} –±–∞–ª–ª–æ–≤ –∑–∞ '{reason}'.")
    await show_main_menu(update)
    return MAIN_MENU

async def select_reason(update: Update, context: CallbackContext):
    reason = update.message.text
    score_table = context.user_data.get('score_table', {})
    action = context.user_data.get('action', '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã')
    user_id = context.user_data['selected_user_id']

    if reason == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_CUSTOM_POINTS

    if reason not in score_table:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_REASON

    points = score_table[reason]
    # –ï—Å–ª–∏ —Å–ø–∏—Å—ã–≤–∞–µ–º, –¥–µ–ª–∞–µ–º –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        points = -abs(points)

    admin_id = update.effective_user.id
    db.add_points(admin_id, user_id, points, reason)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '–°–ø–∏—Å–∞–Ω–æ'} {abs(points)} –±–∞–ª–ª–æ–≤ –∑–∞ '{reason}'")
    await show_main_menu(update)
    return MAIN_MENU

async def enter_custom_points(update: Update, context: CallbackContext):
    try:
        points = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ENTER_CUSTOM_POINTS

    action = context.user_data.get('action', '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã')
    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        points = -abs(points)

    admin_id = update.effective_user.id
    user_id = context.user_data['selected_user_id']
    reason = "–î—Ä—É–≥–æ–µ (–≤—Ä—É—á–Ω—É—é)"

    db.add_points(admin_id, user_id, points, reason)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '–°–ø–∏—Å–∞–Ω–æ'} {abs(points)} –±–∞–ª–ª–æ–≤.")

    await show_main_menu(update)
    return MAIN_MENU

# –û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∑–∞—è–≤–∫–∏)
# –û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–∑–∞—è–≤–∫–∏ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏)
async def check_usage_requests(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id not in ADMINS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    requests = db.get_pending_requests()
    if not requests:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        return

    for req_id, fio, desc, ts in requests:
        msg = f"üì© –ó–∞—è–≤–∫–∞ #{req_id}\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {fio}\nüìå –¶–µ–ª—å: {desc}\nüïí –í—Ä–µ–º—è: {ts}"
        buttons = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req_id}")
            ]
        ]
        markup = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(chat_id=user_id, text=msg, reply_markup=markup)



# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏

async def show_approved_requests(update, context):
    requests = db.get_latest_approved_requests()
    if not requests:
        await update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    text_lines = ["‚úÖ–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"]
    for req_id, fio, desc, date in requests:
        text_lines.append(f" {fio} ‚Äî {desc} ({date})")
    text = "\n".join(text_lines)

    keyboard = [
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="clear_queue")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_queue_buttons(update, context):
    query = update.callback_query
    await query.answer()

    if query.data == "clear_queue":
        db.clear_approved_requests()
        await query.edit_message_text("–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    elif query.data == "back_to_menu":
        # –í–µ—Ä–Ω—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–ø—Ä–∏–º–µ—Ä)
        await query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        # –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫
async def handle_admin_action(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.answer()
    action, req_id = query.data.split("_")
    req_id = int(req_id)

    request_data = db.get_request(req_id)
    if not request_data:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, desc, status, ts = request_data

    if status != "pending":
        await query.edit_message_text(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({status}).")
        return

    if action == "approve":
        db.approve_request(req_id)
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    elif action == "reject":
        db.reject_request(req_id)
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")



# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã (–ø–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏)
async def use_points(update: Update, context: CallbackContext):
    
    user_id = update.effective_user.id
    user_points = db.get_user(user_id)[3]
    if user_points > 0:
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã:")
        return ENTER_DESCRIPTION
    else:
        await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. \n–í–∞—à –±–∞–ª–∞–Ω—Å: {user_points}")
        return MAIN_MENU
        
    
    

async def use_points_description(update: Update, context: CallbackContext):
    desc = update.message.text.strip()
    user_id = update.effective_user.id
    req_id = db.add_usage_request(user_id, desc)
    
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    fio = db.get_user(user_id)[1]
    user_points = db.get_user(user_id)[3]  # –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

    msg = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –æ—Ç {fio} (–±–∞–ª–∞–Ω—Å: {user_points} –±–∞–ª–ª–æ–≤):\n\n{desc}"
    )

    for admin_id in ADMINS:
        try:
            buttons = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req_id}")
                ]
            ]
            markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=admin_id, text=msg, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    await show_main_menu(update)
    return MAIN_MENU


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è fallback
async def fallback(update: Update, context: CallbackContext):
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await show_main_menu(update)
    return MAIN_MENU

from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ConversationHandler, filters

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω–∞ (approve/reject)
    app.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(approve|reject)_\\d+$"))

    # –ö–æ–º–∞–Ω–¥–∞ /check_requests (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—è–≤–æ–∫)
    app.add_handler(CommandHandler("check_requests", check_usage_requests))

    app.add_handler(CallbackQueryHandler(handle_queue_buttons, pattern="^(clear_queue|back_to_menu)$"))

    app.add_handler(MessageHandler(filters.Regex("^–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏$"), choose_role))
    app.add_handler(CallbackQueryHandler(show_employees_by_role, pattern="^role_"))

    app.add_handler(CallbackQueryHandler(handle_delete_user, pattern=r"^delete_user_\d+$"))
    app.add_handler(MessageHandler(filters.Regex("^–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), show_employees_for_admin))



    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^–ú–æ–π –±–∞–ª–∞–Ω—Å$"), handle_balance),
                MessageHandler(filters.Regex("^–ò—Å—Ç–æ—Ä–∏—è$"), handle_history),
                MessageHandler(filters.Regex("^–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã$"), begin_point_change),
                # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"
                MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ$"), check_usage_requests),
                MessageHandler(filters.Regex("^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã$"), use_points),
                MessageHandler(filters.Regex("^–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤$"), show_approved_requests),
                MessageHandler(filters.Regex("^–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), begin_employee_history),
                MessageHandler(filters.Regex("^–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏$"), show_employees_by_role),
                MessageHandler(filters.Regex("^–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), show_employees_for_admin),         
                MessageHandler(filters.Regex("^–ü—Ä–∞–π—Å-–ª–∏—Å—Ç$"), send_price), 
                MessageHandler(filters.Regex("^–ü—Ä–∞–≤–∏–ª–∞$"), send_rules),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–µ–Ω–∏—è$"), show_admin_changes_menu),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞$"), edit_rules),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç$"), edit_price),
                MessageHandler(filters.ALL, fallback)
            ],
            SELECT_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_user)],
            SELECT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_reason)],
            ENTER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, use_points_description)],
            SELECT_EMPLOYEE_FOR_HISTORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_employee_history)],
            SELECT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            ENTER_CUSTOM_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_custom_points)],
            ENTER_DEDUCT_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_deduct_points)],
            REGISTRATION_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, registration_fio)],
            REGISTRATION_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, registration_role)],
            EDIT_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_text_input)],

        },
        fallbacks=[MessageHandler(filters.ALL, fallback)]
    )

    app.add_handler(conv_handler)

    app.run_polling()



if __name__ == '__main__':
    main()
