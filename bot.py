import logging
import asyncio
from telegram.error import BadRequest
from datetime import datetime, timedelta
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    CallbackContext,
    CallbackQueryHandler
)
from db import db
from config import BOT_TOKEN, ADMINS, ADMIN_INFO, USM_SCORES, CONSULTANT_SCORES, price_text, rules_text, SUPERADMINS
from calendar import monthrange, month_name
import locale
# –°–æ—Å—Ç–æ—è–Ω–∏—è ConversationHandler
(
    MAIN_MENU, CHOOSE_ACTION, ENTER_DESCRIPTION, SELECT_USER,
    SELECT_REASON, CONFIRM_POINTS, SELECT_EMPLOYEE_FOR_HISTORY, SELECT_ACTION,
    ENTER_CUSTOM_POINTS, ENTER_DEDUCT_POINTS, REGISTRATION_FIO, REGISTRATION_ROLE, EDIT_TEXT_INPUT,
    SELECT_USAGE_TYPE, SELECT_DATE, CONFIRM_REQUEST   # –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
) = range(16)

locale.setlocale(locale.LC_TIME, 'ru_RU.UTF-8')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

async def ensure_registered(update: Update) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    if user_id in ADMINS or user_id in SUPERADMINS:
        return True
    if not await db.get_user(user_id):
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return False
    return True

async def start(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    user_id = update.effective_user.id
    
    if user_id in ADMINS or user_id in SUPERADMINS:
        await show_main_menu(update)
        return MAIN_MENU

    user = await db.get_user(user_id)
    if user is None:
        await update.message.reply_text(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        )
        return REGISTRATION_FIO
    else:
        await show_main_menu(update)
        return MAIN_MENU

async def show_main_menu(update: Update):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    user_id = update.effective_user.id
    if user_id in ADMINS:
        buttons = [
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤")],
            [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è")],
        ]
    elif user_id in SUPERADMINS:
        buttons = [
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã (silent)")],
            [KeyboardButton("–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤")],
            [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è")],
        ]
    else:
        buttons = [
            [KeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")],
            [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

async def send_price(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."""
    await update.message.reply_text(price_text)

async def send_rules(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∞–≤–∏–ª."""
    await update.message.reply_text(rules_text)

async def registration_fio(update: Update, context: CallbackContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    fio = update.message.text.strip()
    if not fio:
        await update.message.reply_text("–§–ò–û –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return REGISTRATION_FIO
    context.user_data['fio'] = fio
    buttons = [[KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç")], [KeyboardButton("–£–°–ú")]]
    markup = ReplyKeyboardMarkup(buttons, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:", reply_markup=markup)
    return REGISTRATION_ROLE

async def registration_role(update: Update, context: CallbackContext):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    role = update.message.text.strip()
    if role not in ["–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", "–£–°–ú"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return REGISTRATION_ROLE
    fio = context.user_data['fio']
    user_id = update.effective_user.id
    await db.add_user(user_id, fio, role)
    await update.message.reply_text(f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {fio} ({role}) üéâ")
    await show_main_menu(update)
    return MAIN_MENU


#------------------------------SUPERADMIN---------------------------------#


#-------------------------------------------------------------------------#

async def show_admin_changes_menu(update: Update, context: CallbackContext):
    """–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    buttons = [
        [KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞")],
        [KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç")],
        [KeyboardButton("–ù–∞–∑–∞–¥")],
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–ú–µ–Ω—é –∏–∑–º–µ–Ω–µ–Ω–∏–π:", reply_markup=markup)

async def edit_rules(update: Update, context: CallbackContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."""
    context.user_data['edit_mode'] = 'rules'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∞–≤–∏–ª:")
    return EDIT_TEXT_INPUT

async def edit_price(update: Update, context: CallbackContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞."""
    context.user_data['edit_mode'] = 'price'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–∞–π—Å-–ª–∏—Å—Ç:")
    return EDIT_TEXT_INPUT

async def edit_text_input(update: Update, context: CallbackContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç–µ–∫—Å—Ç–∞."""
    mode = context.user_data.get('edit_mode')
    new_text = update.message.text.strip()

    if mode == 'rules':
        global rules_text
        rules_text = new_text
        await update.message.reply_text("‚úÖ –ü—Ä–∞–≤–∏–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
    elif mode == 'price':
        global price_text
        price_text = new_text
        await update.message.reply_text("‚úÖ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω.")
    else:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    context.user_data['edit_mode'] = None
    await show_main_menu(update)
    return MAIN_MENU

async def show_employees_for_admin(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
    users = await db.get_all_users()
    keyboard = []
    for user in users:
        text = f"{user[1]} ({user[2]})"
        callback_data = f"delete_user_{user[0]}"
        keyboard.append([
            InlineKeyboardButton(text=text, callback_data="noop"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=callback_data)
        ])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:", reply_markup=reply_markup)

async def handle_delete_user(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()

    if query.from_user.id not in ADMINS and query.from_user.id not in SUPERADMINS:
        await query.edit_message_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return
    
    user_id = int(query.data.split("_")[-1])
    await db.delete_user(user_id)
    await query.edit_message_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å ID {user_id} —É–¥–∞–ª—ë–Ω.")
    await show_employees_for_admin(update, context)

async def choose_role(update: Update, context: CallbackContext):
    """–í—ã–±–æ—Ä —Ä–æ–ª–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton("–£–°–ú", callback_data="role_–£–°–ú"),
            InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç", callback_data="role_–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=reply_markup)

async def show_employees_by_role(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª–∏."""
    query = update.callback_query
    await query.answer()

    role = query.data.split("_")[1]
    users = await db.get_all_users()
    filtered = [u for u in users if u[2] == role]

    if not filtered:
        await query.edit_message_text(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é {role} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    msg = f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Å —Ä–æ–ª—å—é {role}:\n\n"
    for user in filtered:
        msg += f"{user[1]} ‚Äî –ë–∞–ª–ª—ã: {user[3]}\n"

    await query.edit_message_text(msg)

async def notify_user_points_change(context: CallbackContext, user_id: int, points: int, reason: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–ª–æ–≤."""
    user = await db.get_user(user_id)
    if not user:
        return
    sign = '+' if points > 0 else ''
    text = (
        f"{user[1]}, –≤–∞–º {'–Ω–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '—Å–ø–∏—Å–∞–Ω–æ'} {sign}{points} –±–∞–ª–ª–æ–≤ –∑–∞: {reason}.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤."
    )
    try:
        await context.bot.send_message(chat_id=user_id, text=text)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def begin_employee_history(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
    users = await db.get_all_users()
    buttons = [[KeyboardButton(f"{u[1]} ({u[0]})")] for u in users]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏:", reply_markup=markup)
    return SELECT_EMPLOYEE_FOR_HISTORY

async def show_employee_history(update: Update, context: CallbackContext):
    selected = update.message.text
    try:
        fio, uid = selected.rsplit('(', 1)
        user_id = int(uid[:-1])
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_EMPLOYEE_FOR_HISTORY

    history = await db.get_employee_history(user_id)
    user = await db.get_user(user_id)
    if not user:
        await update.message.reply_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return SELECT_EMPLOYEE_FOR_HISTORY

    if not history:
        text = f"–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è {user[1]} –ø—É—Å—Ç–∞.\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤."
    else:
        text = f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è {user[1]} (—Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤):\n\n"
        for record in history:
            admin_id = record['admin_id']
            points = record['points']
            reason = record['reason']
            timestamp = datetime.strptime(record['timestamp'], "%Y-%m-%d %H:%M:%S")
            timestamp = timestamp.strftime("%Y-%m-%d %H:%M")
            admin_name = ADMIN_INFO.get(admin_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",))[0]
            sign = "+" if points > 0 else ""
            text += f"{timestamp}: {sign}{points} –∑–∞ {reason} (–æ—Ç {admin_name})\n"

    await update.message.reply_text(text)
    await show_main_menu(update)
    return MAIN_MENU


async def handle_balance(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = await db.get_user(update.effective_user.id)
    if user:
        await update.message.reply_text(f"{user[1]}, –≤–∞—à –±–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤")
    else:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

async def handle_history(update: Update, context: CallbackContext):
    history = await db.get_employee_history(update.effective_user.id)
    if not history:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return

    text = "–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:\n"
    for record in history:
        admin_id = record['admin_id']
        points = record['points']
        reason = record['reason']
        timestamp = datetime.strptime(record['timestamp'], "%Y-%m-%d %H:%M:%S")
        timestamp = timestamp.strftime("%Y-%m-%d %H:%M")
        admin_name = ADMIN_INFO.get(admin_id, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",))[0]
        sign = "+" if points > 0 else ""
        text += f"{timestamp}: {sign}{points} –∑–∞ {reason} (–æ—Ç {admin_name})\n"

    await update.message.reply_text(text)



async def entry_points_handler(update: Update, context: CallbackContext):
    text = update.message.text
    if text == "–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        context.user_data['silent'] = False
    elif text == "–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã (silent)":
        context.user_data['silent'] = True
    else:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.")
        return ConversationHandler.END
    
    return await begin_point_change(update, context)


async def begin_point_change(update: Update, context: CallbackContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–ª–æ–≤."""
    buttons = [
        [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã")],
        [KeyboardButton("–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")]
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    return SELECT_ACTION

async def select_action(update: Update, context: CallbackContext):
    action = update.message.text
    if action not in ["–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã", "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã"]:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SELECT_ACTION

    context.user_data['action'] = action
    users = await db.get_all_users()
    buttons = [[KeyboardButton(f"{u[1]} ({u[0]})")] for u in users]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", reply_markup=markup)
    return SELECT_USER


async def select_user(update: Update, context: CallbackContext):
    selected = update.message.text
    try:
        name, uid = selected.rsplit('(', 1)
        user_id = int(uid[:-1])
    except Exception:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_USER

    context.user_data['selected_user_id'] = user_id
    action = context.user_data['action']

    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;).\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 50; –û—à–∏–±–∫–∞ –≤ —É—á—ë—Ç–µ"
        )
        return ENTER_DEDUCT_POINTS
    else:
        user = await db.get_user(user_id)
        if not user:
            await update.message.reply_text("–°–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return SELECT_USER

        score_table = USM_SCORES if user[2] == "–£–°–ú" else CONSULTANT_SCORES
        context.user_data['score_table'] = score_table

        buttons = [[KeyboardButton(reason)] for reason in score_table.keys()]
        buttons.append([KeyboardButton("–î—Ä—É–≥–æ–µ")])
        markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É:", reply_markup=markup)
        return SELECT_REASON


async def enter_deduct_points(update: Update, context: CallbackContext):
    text = update.message.text
    try:
        points_str, reason = text.split(';', 1)
        points = int(points_str.strip())
        reason = reason.strip()
        if points <= 0 or not reason:
            raise ValueError
    except Exception:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–∏—á–∏–Ω—É —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;), –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "50; –û—à–∏–±–∫–∞ –≤ —É—á—ë—Ç–µ"
        )
        return ENTER_DEDUCT_POINTS

    points = -abs(points)
    admin_id = update.effective_user.id
    user_id = context.user_data['selected_user_id']
    silent = context.user_data.get('silent', False)

    await db.add_points(admin_id, user_id, points, reason, silent=silent)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {abs(points)} –±–∞–ª–ª–æ–≤ –∑–∞ '{reason}'.")
    await show_main_menu(update)
    return MAIN_MENU


async def select_reason(update: Update, context: CallbackContext):
    reason = update.message.text
    score_table = context.user_data.get('score_table', {})
    action = context.user_data.get('action', '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã')
    user_id = context.user_data['selected_user_id']

    if reason == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ):")
        return ENTER_CUSTOM_POINTS

    if reason not in score_table:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_REASON

    points = score_table[reason]
    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        points = -abs(points)

    admin_id = update.effective_user.id
    silent = context.user_data.get('silent', False)

    await db.add_points(admin_id, user_id, points, reason, silent=silent)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '–°–ø–∏—Å–∞–Ω–æ'} {abs(points)} –±–∞–ª–ª–æ–≤ –∑–∞ '{reason}'")
    await show_main_menu(update)
    return MAIN_MENU


async def enter_custom_points(update: Update, context: CallbackContext):
    try:
        points = int(update.message.text)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.")
        return ENTER_CUSTOM_POINTS

    action = context.user_data.get('action', '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã')
    if action == "–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã":
        points = -abs(points)

    admin_id = update.effective_user.id
    user_id = context.user_data['selected_user_id']
    reason = "–î—Ä—É–≥–æ–µ (–≤—Ä—É—á–Ω—É—é)"
    silent = context.user_data.get('silent', False)

    await db.add_points(admin_id, user_id, points, reason, silent=silent)
    await notify_user_points_change(context, user_id, points, reason)
    await update.message.reply_text(f"{'–ù–∞—á–∏—Å–ª–µ–Ω–æ' if points > 0 else '–°–ø–∏—Å–∞–Ω–æ'} {abs(points)} –±–∞–ª–ª–æ–≤.")
    await show_main_menu(update)
    return MAIN_MENU


async def check_usage_requests(update: Update, context: CallbackContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤."""
    user_id = update.effective_user.id
    if user_id not in ADMINS and user_id not in SUPERADMINS:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    requests = await db.get_pending_requests()
    if not requests:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")
        return

    for req_id, fio, desc, ts in requests:
        msg = f"üì© –ó–∞—è–≤–∫–∞ #{req_id}\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {fio}\nüìå –¶–µ–ª—å: {desc}\nüïí –í—Ä–µ–º—è: {ts}"
        buttons = [
            [
                InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req_id}")
            ]
        ]
        markup = InlineKeyboardMarkup(buttons)
        await context.bot.send_message(chat_id=user_id, text=msg, reply_markup=markup)

async def show_approved_requests(update, context):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏."""
    requests = await db.get_latest_approved_requests()
    if not requests:
        await update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        return

    text_lines = ["‚úÖ–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏\n"]
    for req_id, fio, desc, date in requests:
        text_lines.append(f" {fio} ‚Äî {desc} ({date})")
    text = "\n".join(text_lines)

    keyboard = [
        [InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å", callback_data="clear_queue")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

async def handle_queue_buttons(update, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –æ—á–µ—Ä–µ–¥–∏."""
    query = update.callback_query
    await query.answer()

    if query.data == "clear_queue":
        await db.clear_approved_requests()
        await query.edit_message_text("–û—á–µ—Ä–µ–¥—å —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.")
    elif query.data == "back_to_menu":
        await query.edit_message_text("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")

async def handle_admin_action(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    query = update.callback_query
    await query.answer()
    action, req_id = query.data.split("_")
    req_id = int(req_id)

    request_data = await db.get_request(req_id)
    if not request_data:
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return

    user_id, desc, status, ts = request_data

    if status != "pending":
        await query.edit_message_text(f"‚ö†Ô∏è –ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ ({status}).")
        return

    if action == "approve":
        await db.approve_request(req_id)
        await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
        await query.edit_message_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞.")
    elif action == "reject":
        await db.reject_request(req_id)
        await context.bot.send_message(chat_id=user_id, text="‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

#-------------------------------------------------------------------------------------------------------------#



async def use_points(update: Update, context: CallbackContext):
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤."""
    user_id = update.effective_user.id
    user = await db.get_user(user_id)
    if not user:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return MAIN_MENU

    if user[3] <= 0:
        await update.message.reply_text(f"–ó–∞—è–≤–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. \n–í–∞—à –±–∞–ª–∞–Ω—Å: {user[3]}")
        return MAIN_MENU

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    buttons = [
        [KeyboardButton("–£–π—Ç–∏ –Ω–∞ 1 —á–∞—Å —Ä–∞–Ω—å—à–µ")],
        [KeyboardButton("–£–π—Ç–∏ –Ω–∞ 2 —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ")],
        [KeyboardButton("–£–π—Ç–∏ –Ω–∞ 3 —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ")],
        [KeyboardButton("–î—Ä—É–≥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
    ]
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã:", reply_markup=markup)
    return SELECT_USAGE_TYPE  

#--------------------------–µ–±—É—á–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å------------------------------------------------#

def generate_calendar_keyboard(year: int, month: int, min_date: datetime = None) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞.
    min_date - –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –¥–∞—Ç–∞ (—Å–µ–≥–æ–¥–Ω—è –∏–ª–∏ –ø–æ–∑–∂–µ)
    """
    # –ï—Å–ª–∏ min_date –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–æ–¥–Ω—è
    if min_date is None:
        min_date = datetime.now().date()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
    _, num_days = monthrange(year, month)
    first_weekday, _ = monthrange(year, month)  # –î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è (0-–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6-–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞
    month_title = f"{month_name[month].capitalize()} {year}"
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    prev_month = month - 1 if month > 1 else 12
    prev_year = year if month > 1 else year - 1
    next_month = month + 1 if month < 12 else 1
    next_year = year if month < 12 else year + 1
    
    nav_buttons = [
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"nav_{prev_year}-{prev_month}"),
        InlineKeyboardButton(month_title, callback_data="ignore"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"nav_{next_year}-{next_month}")
    ]
    keyboard.append(nav_buttons)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days_of_week])
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞
    day_buttons = []
    current_row = []
    
    # –ü—É—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–Ω–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    for _ in range(first_weekday):
        current_row.append(InlineKeyboardButton(" ", callback_data="ignore"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞
    for day in range(1, num_days + 1):
        date_obj = datetime(year, month, day).date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É –¥–∞—Ç—É
        if date_obj < min_date:
            # –ü—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã - –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
            current_row.append(InlineKeyboardButton(" ", callback_data="ignore"))
        else:
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
            current_row.append(InlineKeyboardButton(str(day), callback_data=f"date_{year}-{month}-{day}"))
        
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ —Å—É–±–±–æ—Ç—ã (6-–π –¥–µ–Ω—å)
        if len(current_row) == 7:
            day_buttons.append(current_row)
            current_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏
    if current_row:
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞
        while len(current_row) < 7:
            current_row.append(InlineKeyboardButton(" ", callback_data="ignore"))
        day_buttons.append(current_row)
    
    keyboard.extend(day_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_calendar")])
    
    return InlineKeyboardMarkup(keyboard)

async def select_usage_type(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤."""
    choice = update.message.text
    context.user_data['usage_type'] = choice
    
    if choice.startswith("–£–π—Ç–∏ –Ω–∞"):
        hours = int(choice.split()[2])
        context.user_data['hours'] = hours
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        today = datetime.now().date()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
        keyboard = generate_calendar_keyboard(today.year, today.month, min_date=today)
        
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Ö–æ–¥–∞:",
            reply_markup=keyboard
        )
        return SELECT_DATE
    
    else:  # –î—Ä—É–≥–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã:")
        return ENTER_DESCRIPTION

async def handle_calendar(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ."""
    query = update.callback_query
    await query.answer()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤)
    if query.data.startswith("nav_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –∏–∑ callback_data
        year, month = map(int, query.data.split("_")[1].split("-"))
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è)
        min_date = datetime.now().date()
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        keyboard = generate_calendar_keyboard(year, month, min_date=min_date)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —É—Ö–æ–¥–∞:",
                reply_markup=keyboard
            )
        except BadRequest:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        return SELECT_DATE
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    elif query.data.startswith("date_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ callback_data
        year, month, day = map(int, query.data.split("_")[1].split("-"))
        selected_date = datetime(year, month, day).date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        date_str = selected_date.strftime("%Y-%m-%d")
        if not await db.is_date_available(date_str):
            await query.answer("–≠—Ç–∞ –¥–∞—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.", show_alert=True)
            return SELECT_DATE
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        context.user_data['date'] = selected_date
        hours = context.user_data['hours']
        cost = 150 * hours
        date_display = selected_date.strftime("%d.%m.%Y")
        description = f"–£–π—Ç–∏ –Ω–∞ {hours} —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ {date_display} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –±–∞–ª–ª–æ–≤)"
        context.user_data['description'] = description
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_request"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_request")
            ]
        ])
        
        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_display}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",
            reply_markup=keyboard
        )
        return CONFIRM_REQUEST
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã
    elif query.data == "cancel_calendar":
        try:
            await query.message.delete()
        except BadRequest:
            pass
        
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω."
        )
        await show_main_menu_for_chat(context, query.message.chat_id, query.from_user.id)
        return MAIN_MENU
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –Ω–∞–∂–∞—Ç–∏—è
    return SELECT_DATE

async def cancel_date_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã."""
    await update.message.reply_text("–í—ã–±–æ—Ä –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.")
    await show_main_menu(update)
    return MAIN_MENU

async def show_main_menu_for_chat(context: CallbackContext, chat_id: int, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ chat_id."""
    if user_id in ADMINS:
        buttons = [
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤")],
            [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è")],
        ]
    elif user_id in SUPERADMINS:
        buttons = [
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã (silent)")],
            [KeyboardButton("–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤")],
            [KeyboardButton("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ò–∑–º–µ–Ω–µ–Ω–∏—è")],
        ]
    else:
        buttons = [
            [KeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å")],
            [KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è")],
            [KeyboardButton("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã")],
            [KeyboardButton("–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏")],
            [KeyboardButton("–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")],
            [KeyboardButton("–ü—Ä–∞–≤–∏–ª–∞")],
        ]
    
    markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await context.bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    
async def handle_date_selection(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è"""
    date_str = update.message.text
    
    if date_str == "–û—Ç–º–µ–Ω–∞":
        await show_main_menu(update)
        return MAIN_MENU
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        day, month, year = map(int, date_str.split('.'))
        selected_date = datetime(year, month, day).date()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        today = datetime.now().date()
        if selected_date < today:
            await update.message.reply_text("–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É.")
            return SELECT_DATE
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        date_db_format = selected_date.strftime("%Y-%m-%d")
        if not await db.is_date_available(date_db_format):
            await update.message.reply_text("–≠—Ç–∞ –¥–∞—Ç–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é.")
            return SELECT_DATE
        
        hours = context.user_data['hours']
        cost = 150 * hours
        date_display = selected_date.strftime("%d.%m.%Y")
        description = f"–£–π—Ç–∏ –Ω–∞ {hours} —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ {date_display} (—Å—Ç–æ–∏–º–æ—Å—Ç—å: {cost} –±–∞–ª–ª–æ–≤)"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data['description'] = description
        context.user_data['date'] = selected_date
        
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await update.message.reply_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date_display}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?",
            reply_markup=ReplyKeyboardMarkup([
                [KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"), KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞")]
            ], resize_keyboard=True)
        )
        return CONFIRM_REQUEST
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return SELECT_DATE


async def handle_confirmation(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "confirm_request":
        description = context.user_data.get('description', '')
        user_id = query.from_user.id
        hours = context.user_data.get('hours', 1)
        cost = 150 * hours
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        user = await db.get_user(user_id)
        if not user:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return ConversationHandler.END
            
        if user[3] < cost:
            await query.edit_message_text(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {user[3]}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: {cost}")
            return ConversationHandler.END
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É
        req_id = await db.add_usage_request(user_id, description)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await query.edit_message_text(
            f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMINS:
            try:
                buttons = [
                    [
                        InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req_id}"),
                        InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req_id}")
                    ]
                ]
                markup = InlineKeyboardMarkup(buttons)
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤\n\n"
                         f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {user[1]}\n"
                         f"üìå –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"
                         f"üí∞ –ë–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤",
                    reply_markup=markup
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")
        
        await show_main_menu_for_chat(context, query.message.chat_id, user_id)
        return MAIN_MENU
    
    elif query.data == "cancel_request":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        await query.edit_message_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        
        await show_main_menu_for_chat(context, query.message.chat_id, query.from_user.id)
        return MAIN_MENU
    
    return CONFIRM_REQUEST

async def ignore_callback(update: Update, context: CallbackContext):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()



async def use_points_description(update: Update, context: CallbackContext):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤."""
    desc = update.message.text.strip()
    user_id = update.effective_user.id
    req_id = await db.add_usage_request(user_id, desc)
    
    await update.message.reply_text("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")

    user = await db.get_user(user_id)
    if not user:
        await update.message.reply_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return MAIN_MENU

    msg = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–∞–ª–ª–æ–≤ –æ—Ç {user[1]} (–±–∞–ª–∞–Ω—Å: {user[3]} –±–∞–ª–ª–æ–≤):\n\n{desc}"

    for admin_id in ADMINS:
        try:
            buttons = [
                [
                    InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{req_id}"),
                    InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{req_id}")
                ]
            ]
            markup = InlineKeyboardMarkup(buttons)
            await context.bot.send_message(chat_id=admin_id, text=msg, reply_markup=markup)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: {e}")

    await show_main_menu(update)
    return MAIN_MENU


async def fallback(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."""
    await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    await show_main_menu(update)
    return MAIN_MENU

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    await db.connect()

    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(handle_admin_action, pattern="^(approve|reject)_\\d+$"))
    app.add_handler(CallbackQueryHandler(handle_queue_buttons, pattern="^(clear_queue|back_to_menu)$"))
    app.add_handler(CallbackQueryHandler(show_employees_by_role, pattern="^role_"))
    app.add_handler(CallbackQueryHandler(handle_delete_user, pattern=r"^delete_user_\d+$"))
    # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ main()
    app.add_handler(CallbackQueryHandler(ignore_callback, pattern="^ignore$"))
    app.add_handler(CallbackQueryHandler(handle_calendar, pattern=r"^(nav|date|cancel)_"))
    app.add_handler(CallbackQueryHandler(handle_confirmation, pattern="^(confirm_request|cancel_request)$"))
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^–ú–æ–π –±–∞–ª–∞–Ω—Å$"), handle_balance),
                MessageHandler(filters.Regex("^–ò—Å—Ç–æ—Ä–∏—è$"), handle_history),
                MessageHandler(filters.Regex("^(–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã|–ù–∞—á–∏—Å–ª–∏—Ç—å/–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã \\(silent\\))$"), entry_points_handler),
                MessageHandler(filters.Regex("^–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ$"), check_usage_requests),
                MessageHandler(filters.Regex("^–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–ª–ª—ã$"), use_points),
                MessageHandler(filters.Regex("^–û—á–µ—Ä–µ–¥—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–∞–ª–ª–æ–≤$"), show_approved_requests),
                MessageHandler(filters.Regex("^–ò—Å—Ç–æ—Ä–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), begin_employee_history),
                MessageHandler(filters.Regex("^–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏$"), choose_role),
                MessageHandler(filters.Regex("^–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞$"), show_employees_for_admin),
                MessageHandler(filters.Regex("^–ü—Ä–∞–π—Å-–ª–∏—Å—Ç$"), send_price),
                MessageHandler(filters.Regex("^–ü—Ä–∞–≤–∏–ª–∞$"), send_rules),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–µ–Ω–∏—è$"), show_admin_changes_menu),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∏–ª–∞$"), edit_rules),
                MessageHandler(filters.Regex("^–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–π—Å-–ª–∏—Å—Ç$"), edit_price),
                MessageHandler(filters.ALL, fallback)
            ],
            SELECT_USER: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_user)],
            SELECT_REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_reason)],
            ENTER_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, use_points_description)],
            SELECT_USAGE_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_usage_type)],
            SELECT_DATE: [CallbackQueryHandler(handle_calendar, pattern=r"^calendar"),
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel_date_selection)],
            SELECT_EMPLOYEE_FOR_HISTORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_employee_history)],
            SELECT_ACTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, select_action)],
            ENTER_CUSTOM_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_custom_points)],
            ENTER_DEDUCT_POINTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, enter_deduct_points)],
            REGISTRATION_FIO: [MessageHandler(filters.TEXT & ~filters.COMMAND, registration_fio)],
            REGISTRATION_ROLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, registration_role)],
            EDIT_TEXT_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_text_input)],
        },
        fallbacks=[MessageHandler(filters.ALL, fallback)]
    )

    app.add_handler(conv_handler)
    await app.initialize()
    await app.start()
    await app.updater.start_polling()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    while True:
        await asyncio.sleep(3600)

if __name__ == '__main__':
    asyncio.run(main())